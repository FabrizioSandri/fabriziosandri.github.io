<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://fabriziosandri.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fabriziosandri.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-13T17:14:27+00:00</updated><id>https://fabriziosandri.github.io/feed.xml</id><title type="html">blank</title><subtitle>ML Engineer | Open source developer </subtitle><entry><title type="html">Retrieval-Augmented Generation (RAG) in the industries.</title><link href="https://fabriziosandri.github.io/blog/2024/rag-thought/" rel="alternate" type="text/html" title="Retrieval-Augmented Generation (RAG) in the industries."/><published>2024-09-27T00:00:00+00:00</published><updated>2024-09-27T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2024/rag-thought</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2024/rag-thought/"><![CDATA[<h4 id="a-quick-thought-on-retrieval-augmented-generation-rag-and-its-transformative-potential">A quick thought on Retrieval-Augmented Generation (RAG) and its transformative potential.</h4> <p>In industries like aerospace, where vast amounts of unstructured data from decades of experience (e.g., Apollo missions) exist, the challenge isn’t just retrieving this data, but reviving its meaning. As experts retire, their knowledge is often left behind in documents and records, which retrieval systems alone can’t fully leverage.</p> <p>RAG offers a solution by not only retrieving information but enhancing it with reasoning—almost as if you’re speaking to an expert. This blend of retrieval and generation is key to unlocking the true value of data and keeping vital expertise alive.</p> <p>Imagine an AI agent that allows user to talk with and have direct access to response to any kind of question regarding the knowledge of the company. An AI agent that is literally able to mimic all the previous competences of the company, even 100 years ago.</p> <p>How far away are we from this reality? 10 years ago probably we were very far away from this, but with the last advances in Large Language Models my feeling is that we made a giant leap in the last few years and this starts to be reality.</p> <p>What is your though? How far are we from this giant leap?</p> <p><img src="/assets/img/rag.gif" width="100%"/></p>]]></content><author><name></name></author><category term="AI"/><summary type="html"><![CDATA[Retrieval-Augmented Generation (RAG) and its transformative potential.]]></summary></entry><entry><title type="html">Particle Swarm Optimization</title><link href="https://fabriziosandri.github.io/blog/2023/particle-swarm-optimization/" rel="alternate" type="text/html" title="Particle Swarm Optimization"/><published>2023-07-22T00:00:00+00:00</published><updated>2023-07-22T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2023/particle-swarm-optimization</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2023/particle-swarm-optimization/"><![CDATA[<div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/notebooks/pso.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" scrolling="no" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="Optimization"/><summary type="html"><![CDATA[Visualization of particle swarm optimization(PSO) in action.]]></summary></entry><entry><title type="html">My Google Summer of Code experience</title><link href="https://fabriziosandri.github.io/blog/2022/google-summer-of-code-summary/" rel="alternate" type="text/html" title="My Google Summer of Code experience"/><published>2022-09-08T00:00:00+00:00</published><updated>2022-09-08T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/google-summer-of-code-summary</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/google-summer-of-code-summary/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The conclusion of this long and magnificent experience of Google Summer of Code, which began around five months ago, has arrived, and it is now time to recap the points of this long journey. I knew from the first day that this was going to be a fantastic experience, but I never expected to learn so much this summer!</p> <p>It all started some months ago when my thesis supervisor advised that I engage in this initiative that Google has been doing for several years. My thesis supervisor put me in touch with a PhD student at the University of Trento who had previously participated in GSOC and is now a mentor. Fascinated by his experience, I set out to work to ensure that my proposal was chosen. After several weeks of effort, I submitted my project idea, and on May 20, I received an email informing me that I had been accepted for Google Summer of Code 2022; I was overjoyed!</p> <h2 id="google-summer-of-code-work">Google Summer of Code work</h2> <p>The first three weeks of work, known as the Community Bonding period, have been a chance for me to study and become familiar with the tools that I would be using for the next ten weeks. This period was really beneficial to me since I was able to immerse myself into the R community while also learning a lot of new topics thanks to my blog posts: writing them helped me keep track of everything I had been studying.</p> <p>In accordance with the <a href="https://github.com/rstats-gsoc/gsoc2022/wiki/RcppDeepState#details-of-your-coding-project">goal of my project</a> I’ve been working on two distinct repositories:</p> <ul> <li><a href="https://github.com/FabrizioSandri/RcppDeepState">FabrizioSandri/RcppDeepState</a> : the RcppDeepState package implementation, which runs fuzz testing with Valgrind and DeepState;</li> <li><a href="https://github.com/FabrizioSandri/RcppDeepState-action">FabrizioSandri/RcppDeepState-action</a> : Implementation of the GitHub action that allows developers to execute RcppDeepState on GitHub-hosted Rcpp-based packages. The action is also available on the <a href="https://github.com/marketplace/actions/rcppdeepstate">GitHub Marketplace</a>.</li> </ul> <p>All of my progress on the two aforementioned repositories is documented in the pull requests and issues listed underneath. Furthermore, the week summaries that I posted at the end of each week give a more detailed explanation of the changes that I made week by week; you can find them <a href="https://fabriziosandri.github.io/gsoc-2022-blog/">here</a>.</p> <h5 id="fabriziosandrircppdeepstate-action">FabrizioSandri/RcppDeepState-action</h5> <table class="table table-sm"> <thead class="thead-light"> <tr> <th>Pull requests</th> <th>Issues</th> </tr> </thead> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/1">#1 First prototype</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/2">#2 Segmentation fault not catched</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/2">#2 Exit codes</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/4">#4 Fuzzing functions with Rcpp parameters</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/3">#3 Input arguments</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/7">#7 Valgrind for initial pass</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/4">#4 Composite action</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/8">#8 RcppDeepState optimization options</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/6">#6 Action&#39;s comments</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/10">#10 Missing Rcpp Strings support</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/7">#7 Action&#39;s comments - 2</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/13">#13 Wrong inputs column</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/8">#8 Additional arguments and documentation</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/18">#18 Valgrind and Clang-14 dwarf support</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/9">#9 Docker hub integration</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/10">#10 Report size exceeds the maximum GitHub comment size</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/12">#12 Docker Hub tags problem</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/15">#15 Report details</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/17">#17 Get errors count</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/18">#18 Parameters names/values</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/20">#20 Dependencies issue</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/21">#21 Action logs enhancement</a></td> <td></td> </tr> </table> <h5 id="fabriziosandrircppdeepstate">FabrizioSandri/RcppDeepState</h5> <table class="table table-sm"> <thead class="thead-light"> <tr> <th>Pull requests</th> <th>Issues</th> </tr> </thead> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/1">#1 Makefile generation fix and improvements</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/5">#5 what to do when auto comments are too large?</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/3">#3 Override default Makevars</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/11">#11 Docker Hub integration trigger event</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/5">#5 Harness creation improvements</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/13">#13 SHA in PR comment?</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/6">#6 Debug symbols tests</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/14">#14 beta test on other packages?</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/9">#9 Logging improvements</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/16">#16 parameter names / value?</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/11">#11 Rcpp string support</a></td> <td><a href="https://github.com/FabrizioSandri/RcppDeepState-action/issues/19">#19 Not finding source files from DESCRIPTION LinkingTo: field?</a></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/12">#12 Fuzz only supported functions</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/14">#14 qs::c_qsave moved to the runner</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/15">#15 Automatically setup CI</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/16">#16 Harness creation improvements - 2</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/17">#17 Custom test harness</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/19">#19 Harness unit test name</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/20">#20 Editable functions</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/21">#21 Harness unit test name - 2</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/22">#22 Exit status codes</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/23">#23 Harness creation improvements - 3</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/24">#24 Makevars issue</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/25">#25 Dependencies problem</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/26">#26 IntegerMatrix support</a></td> <td></td> </tr> <tr> <td><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/27">#27 Dependencies issue</a></td> <td></td> </tr> </table> <h2 id="future-work">Future work</h2> <p>There’s still a lot to accomplish with RcppDeepstate, and I’m specifically talking to the fact that a future step would be the package’s release on CRAN. As the goal of my project, I spent a lot of time during the Google Summer of Code improving RcppDeepState for a future CRAN publication, but with all of the problems related to Deepstate portability on Windows-based systems, I believe that this is a future step, as demonstrated by the results obtained after uploading the package on Win-builder: most of the errors were caused by the use of a Windows system.</p> <p>Another step would be to expand RcppDeepState’s datatype coverage by introducing additional datatypes, allowing RcppDeepState to run on a broader range of packages. To do this, I created a wiki article that describes how to <a href="https://github.com/FabrizioSandri/RcppDeepState/wiki/Add-a-new-datatype-to-RcppDeepState">Add a new datatype to RcppDeepState</a>. The scope of this page has been successfully shown thanks to Dr.Martin R. Smith’s first external contribution to the RcppDeepState package. More information is available in the <a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/09/02/beta-test-summary.html">dedicated blog post</a>.</p> <p>Another future improvement would be to provide a new option to RcppDeepState-action that allows users to choose a different fuzzer than the default one provided by Deepstate; Libfuzzer, Manticore and Angr are three alternative fuzzers.</p> <h2 id="my-google-summer-of-code-experience">My Google Summer of Code experience</h2> <p>My Google Summer of Code experience was incredible, something I never imagined, and it was one of the best in my career. This experience taught me a lot about working with others and contributing to open source. At the end of this experience, I can certainly say that I will spend more time to open source than the time I’ve spent so far. As a maintainer, I will continue to contribute to my project.</p> <p>I am grateful to all of my mentors who took the time to guide me through this journey and share their unique experience and knowledge with me. Special thanks go to:</p> <ul> <li>my evaluating mentor Dr.Toby Dylan Hocking, who has always been available to help me during the Google Summer of Code. I was able to stay on track and keep up the good work thanks to his helpful guidance.</li> <li>my mentor Randy Lai, who helped me with his great experience with GitHub Actions to improve the RcppDeepState action;</li> <li>my mentor Anirban Chetia, who gave me good suggestions on the challenges I had in the early stages of utilizing RcppDeepState;</li> <li>Dr.Martin R. Smith, for his great availability to beta test my GitHub action on his packages and for integrating a new datatype to RcppDeepState;</li> <li>all of the R community people I’ve interacted with on GitHub, the RcppCore team;</li> <li>Google/Google Summer of Code for organizing this fantastic event year after year.</li> </ul>]]></content><author><name></name></author><category term="Google Summer of Code"/><summary type="html"><![CDATA[The summary of my experience with Google Summer of Code and a brief recap of my work]]></summary></entry><entry><title type="html">Beta testing results</title><link href="https://fabriziosandri.github.io/blog/2022/beta-test-summary/" rel="alternate" type="text/html" title="Beta testing results"/><published>2022-09-02T00:00:00+00:00</published><updated>2022-09-02T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/beta-test-summary</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/beta-test-summary/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Beta testing is the process of evaluating a software prototype right before its release in order to detect flaws. This procedure can be appropriately conducted by a third party who is using the program for the first time, the beta tester. It’s important to note that the most important part of this phase is observing the user’s interactions with the program without any input from the developers in order to identify the most critical sections that need to be handled.</p> <p>Thanks to my mentor, I was able to take part in several live beta testing sessions where I was the observer and my mentor was the beta tester. The main goal of this session was to uncover weaknesses and difficulties in the technique for configuring RcppDeepState-action. As an observer, I couldn’t participate; all I could do was take notes on potential difficulties. This session showed me that no matter how much time I spent looking for bugs in the code I wrote, I would never find them in a short period of time; beta testing, on the other hand, allowed me to rapidly detect flaws.</p> <h2 id="a-new-strategy">A new strategy</h2> <p>Live sessions are extremely beneficial, but they are not the only strategy to beta test the code. Another possibility for speeding up the process on a large scale is to use automated techniques to test the code and compare the results to others that we already have access to. This is exactly what I talked about in my earlier blog post about beta testing RcppDeepState-action on GitHub-hosted CRAN packages<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>.</p> <p>To recap the previous blog posts, I wrote two script:</p> <ul> <li>one that automatically initializes the RcppDeepState-action on a list of preset GitHub repositories that included problems according to Akhila’s article<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. This test were ran within the forked version of the repository to ensure that there were no permission issues with the GitHub tokens<sup id="fnref:1:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>;</li> <li>the other one that automatically replicates the RcppDeepState reports as a comment on the remote repositories<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>.</li> </ul> <p>Using this method, I was able to identify a number of new issues with the RcppDeepState library. The most problematic one I discovered was that RcppDeepState would not build the shared object file in some circumstances due to missing dependencies in the tested packages. The incorrect usage of <code class="language-plaintext highlighter-rouge">R CMD INSTALL</code> inside the package to build the shared object file without first installing the missing package dependencies caused this issue. This problem was also reported to me by Dr.Martin R. Smith, author of numerous R packages accessible on CRAN, like <a href="https://cran.r-project.org/web/packages/Quartet/index.html">Quartet</a> and <a href="https://cran.r-project.org/web/packages/TreeSearch/">TreeSearch</a>.</p> <p>Furthermore, while examining the TreeSearch package, Dr. Smith identified another issue: one of its packages was not analyzed because some datatypes fell outside of the list of datatypes supported by RcppDeepState. He asked if this was expected behavior, and I said yes, as well as providing him with a detailed description of the error’s motivation, as well as a link to the RcppDeepState wiki article on how to add support for a new datatype. Dr. Smith then made a pull request<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup> to the RcppDeepState repository, asking for the <code class="language-plaintext highlighter-rouge">IntegerMatrix</code> datatype to be added to RcppDeepState. Because of this, I was able to determine whether or not the method required to add support for a new datatype is properly documented; based on the results, I can claim that Dr.Smith did an excellent job by following all of the wiki steps one by one.</p> <h2 id="conclusion">Conclusion</h2> <p>Finally, I can say with certainty that beta testing really helped me in determining what the issues are with RcpDeepStare. Specifically, because to this new technique, I was able to collect feedback from beta testers, like in the case of Dr.Smith.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/08/23/rcppdeepstate-beta-test.html">Beta test RcppDeepState-action on GitHub hosted CRAN packages</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> <li id="fn:2"> <p><a href="https://akhikolla.github.io./packages-folders/">Rcpp-based packages where RcppDeepState found issues</a><sup id="fnref:1:2"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3"> <p><a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/08/30/rcppdeepstate-beta-test-2.html">Issue with RcppDeepState-action beta test</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState/pull/26">IntegerMatrix support</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="GitHub Action"/><summary type="html"><![CDATA[The results of beta testing RcppDeepState-action]]></summary></entry><entry><title type="html">Issue with RcppDeepState-action beta test</title><link href="https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test-2/" rel="alternate" type="text/html" title="Issue with RcppDeepState-action beta test"/><published>2022-08-30T00:00:00+00:00</published><updated>2022-08-30T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test-2</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test-2/"><![CDATA[<h2 id="introduction-to-the-issue">Introduction to the issue</h2> <p>After performing beta tests on the binsegRcpp<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> package using RcppDeepState-action I discovered two issues.</p> <p>The first is that the user need consent from a single maintainer with write access before running a workflow within a remote repository. This has been demonstrated with my mentor through pull request <a href="https://github.com/tdhock/binsegRcpp/pull/16">tdhock/binsegRcpp#16</a>. In fact, this is explicitly stated in the GitHub documentation<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>:</p> <blockquote> <p>To help prevent this, workflows on pull requests to public repositories from some outside contributors will not run automatically, and might need to be approved first. By default, all first-time contributors require approval to run workflows.</p> </blockquote> <p>However, this is not the only issue: the person who opens a pull request is not permitted to use the remote repository’s <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> to automatically add a comment in the pull request. The token is only valid inside the same repository. This is clearly explained in the GitHub docs<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>:</p> <blockquote> <p>When you enable GitHub Actions, GitHub installs a GitHub App on your repository. The GITHUB_TOKEN secret is a GitHub App installation access token. You can use the installation access token to authenticate on behalf of the GitHub App installed on your repository. The token’s permissions are limited to the repository that contains your workflow.</p> </blockquote> <h2 id="workaround">Workaround</h2> <p>The primary purpose is to run RcppDeepState-action on CRAN packages available on GitHub and share the findings with the package authors. To accomplish this task, the following steps can be used as a workaround for the previous issues:</p> <ol> <li>fork the remote repository;</li> <li>Create a self-pull request(from fork to fork) in the forked repository to examine the package using RcppDeepState-action;</li> <li>If RcppDeepState finds at least one error, make a pull request on the remote repository(from fork to upstream);</li> <li>Copy and paste the RcppDeepState report from the forked repository’s pull request into the pull request of the remote repository.</li> </ol> <h2 id="implementation">Implementation</h2> <p>According to the script that automatically forks and opens a self pull request written in the previous blog post<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup>, we can write a script that, after the RcppDeepState-action workflow is done, opens a remote pull request on the original repository and copies and pastes the RcppDeepState report within the remote pull request.</p> <p>The first step is to import the required libraries and get the GitHub personal access token (PAT) stored in an environment variable called GITHUB_PAT in my case. This token will be used to authorize the push of local commits to a repository’s remote branch. To generate this token, you can follow the instructions provided by GitHub<sup id="fnref:5"><a href="#fn:5" class="footnote" rel="footnote" role="doc-noteref">5</a></sup>.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"gh"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"git2r"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"data.table"</span><span class="p">)</span><span class="w">

</span><span class="n">cred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cred_token</span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"GITHUB_PAT"</span><span class="p">)</span><span class="w">
</span><span class="n">batch_size</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w"> </span><span class="c1"># adjust the batch size</span><span class="w">
</span><span class="n">organization</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"RcppDeepState"</span><span class="w">
</span></code></pre></div></div> <p>In this case, we have defined two additional parameters, one of which is the <code class="language-plaintext highlighter-rouge">batch_size</code> parameter, which limits the number of packages tested. This option must be equivalent to the <code class="language-plaintext highlighter-rouge">batch_size</code> parameter used when executing the script that forks and creates a pull request<sup id="fnref:4:1"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup>, or else some pull request will not be submitted. Furthermore, we define the <code class="language-plaintext highlighter-rouge">organization</code> parameter, which searches for forked repositories inside the organization provided in this parameter. This parameter has been added after the problem outlined in the <a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/08/23/rcppdeepstate-beta-test.html#future-work">Future work</a> paragraph of the previous blog post.</p> <p>Given a <code class="language-plaintext highlighter-rouge">pkg.repos</code> data table produced by following the steps specified in Dr.Toby Dylan Hocking’s blog post<sup id="fnref:6"><a href="#fn:6" class="footnote" rel="footnote" role="doc-noteref">6</a></sup>, the implementation of the automatic process outlined above is described in the next steps.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">pkg.repos</span><span class="w">
          </span><span class="n">Package</span><span class="w">                                  </span><span class="n">repo.url</span><span class="w">
  </span><span class="m">1</span><span class="o">:</span><span class="w"> </span><span class="n">humaniformat</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">ironholds</span><span class="o">/</span><span class="n">humaniformat</span><span class="w">
  </span><span class="m">2</span><span class="o">:</span><span class="w">       </span><span class="n">jmotif</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jMotif</span><span class="o">/</span><span class="n">jmotif</span><span class="o">-</span><span class="n">R</span><span class="w">
  </span><span class="m">3</span><span class="o">:</span><span class="w">     </span><span class="n">olctools</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">Ironholds</span><span class="o">/</span><span class="n">olctools</span><span class="w">
  </span><span class="m">4</span><span class="o">:</span><span class="w">  </span><span class="n">RcppDynProg</span><span class="w">  </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">WinVector</span><span class="o">/</span><span class="n">RcppDynProg</span><span class="w">
  </span><span class="m">5</span><span class="o">:</span><span class="w">      </span><span class="n">BWStest</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">shabbychef</span><span class="o">/</span><span class="n">BWStest</span><span class="w">
 </span><span class="o">---</span><span class="w">                                                       
</span><span class="m">111</span><span class="o">:</span><span class="w">       </span><span class="n">tweenr</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">thomasp85</span><span class="o">/</span><span class="n">tweenr</span><span class="w">
</span><span class="m">112</span><span class="o">:</span><span class="w">         </span><span class="n">uwot</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jlmelville</span><span class="o">/</span><span class="n">uwot</span><span class="w">
</span><span class="m">113</span><span class="o">:</span><span class="w">       </span><span class="n">vapour</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">hypertidy</span><span class="o">/</span><span class="n">vapour</span><span class="w">
</span><span class="m">114</span><span class="o">:</span><span class="w">           </span><span class="n">wk</span><span class="w">         </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wk</span><span class="w">
</span><span class="m">115</span><span class="o">:</span><span class="w">      </span><span class="n">wkutils</span><span class="w">    </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wkutils</span><span class="w">
</span></code></pre></div></div> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pull_body_template</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"This PR adds a new Github Action which runs"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"RcppDeepState+valgrind on your package. That means the C++"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"functions of your package will be tested with random"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"inputs, and there will be a comment like this one for each"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"new PR (which reports if valgrind found any issues with"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"random inputs).\n\n#### RcppDeepState analysis result\n"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"This package contains problems, according to"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"RcppDeepState. The report was generated by"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"[RcppDeepState-action](https://github.com/FabrizioSandri/RcppDeepState-action)"</span><span class="p">,</span><span class="w">
                   </span><span class="s2">"in this repository's fork and is accessible "</span><span class="p">)</span><span class="w">

</span><span class="n">pkg.repos</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nc</span><span class="o">::</span><span class="n">capture_first_df</span><span class="p">(</span><span class="n">pkg.repos</span><span class="p">,</span><span class="w"> </span><span class="n">repo.url</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="w">
                                  </span><span class="s2">"https://github.com/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="w">
                                  </span><span class="s2">".*/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo_name</span><span class="o">=</span><span class="s2">".*"</span><span class="p">)))</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">repo_i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">pkg.repos</span><span class="p">)))){</span><span class="w">
  </span><span class="n">repo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pkg.repos</span><span class="p">[</span><span class="n">repo_i</span><span class="p">]</span><span class="w">
  </span><span class="n">fork_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">organization</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_name</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">"/"</span><span class="p">)</span><span class="w">
  </span><span class="n">fork_pull_url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"https://github.com"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"pull"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">"/"</span><span class="p">)</span><span class="w">

  </span><span class="c1"># get the report comment from the forked repository</span><span class="w">
  </span><span class="n">fork_comments_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"GET /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_name</span><span class="p">,</span><span class="w"> 
                                   </span><span class="s2">"/issues/1/comments"</span><span class="p">)</span><span class="w">
  </span><span class="n">rcppdeepstate_pull</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">fork_comments_endpoint</span><span class="p">)</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">rcppdeepstate_pull</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">){</span><span class="w">
    </span><span class="n">warn_msg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"The report comment has not been generated for"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">)</span><span class="w">
    </span><span class="n">message</span><span class="p">(</span><span class="n">warn_msg</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w">
    </span><span class="n">rcppdeepstate_comment</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sub</span><span class="p">(</span><span class="s2">"&lt;!-- RcppDeepState-action comment--&gt;"</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
                                </span><span class="n">rcppdeepstate_pull</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">body</span><span class="p">)</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">grepl</span><span class="p">(</span><span class="s2">"No error has been reported"</span><span class="p">,</span><span class="w"> </span><span class="n">rcppdeepstate_comment</span><span class="p">,</span><span class="w"> </span><span class="n">fixed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)){</span><span class="w">
      </span><span class="n">warn_msg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"No error has been reported by RcppDeepState for the"</span><span class="p">,</span><span class="w">
                        </span><span class="s2">"package"</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">)</span><span class="w">
      </span><span class="n">message</span><span class="p">(</span><span class="n">warn_msg</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w">
      </span><span class="c1"># get the remote repo default branch name</span><span class="w">
      </span><span class="n">upstream_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"GET /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">)</span><span class="w">
      </span><span class="n">upstream_details</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">upstream_endpoint</span><span class="p">)</span><span class="w">

      </span><span class="c1"># open a pull request in the original repository</span><span class="w">
      </span><span class="n">pulls_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/pulls"</span><span class="p">)</span><span class="w">
      </span><span class="n">pull_title</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"Analyze the package with RcppDeepState"</span><span class="w">
      </span><span class="n">pull_body</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">pull_body_template</span><span class="p">,</span><span class="s2">"[here]("</span><span class="p">,</span><span class="w"> </span><span class="n">fork_pull_url</span><span class="p">,</span><span class="w"> </span><span class="s2">")."</span><span class="p">)</span><span class="w">

      </span><span class="n">head</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">organization</span><span class="p">,</span><span class="w"> </span><span class="s2">"RcppDeepState"</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">":"</span><span class="p">)</span><span class="w">
      </span><span class="n">pull_response</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">pulls_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="o">=</span><span class="n">pull_title</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="o">=</span><span class="n">pull_body</span><span class="p">,</span><span class="w"> 
                          </span><span class="n">owner</span><span class="o">=</span><span class="n">upstream_details</span><span class="o">$</span><span class="n">owner</span><span class="o">$</span><span class="n">login</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">=</span><span class="n">repo</span><span class="o">$</span><span class="n">repo_name</span><span class="p">,</span><span class="w"> 
                          </span><span class="n">base</span><span class="o">=</span><span class="n">upstream_details</span><span class="o">$</span><span class="n">default_branch</span><span class="p">,</span><span class="w"> </span><span class="n">head</span><span class="o">=</span><span class="n">head</span><span class="p">)</span><span class="w">

      </span><span class="c1"># issue a comment with the rcppdeepstate report</span><span class="w">
      </span><span class="n">pull_number</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pull_response</span><span class="o">$</span><span class="n">number</span><span class="w">
      </span><span class="n">original_comments_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> 
                                      </span><span class="s2">"/issues/"</span><span class="p">,</span><span class="w"> </span><span class="n">pull_number</span><span class="p">,</span><span class="w"> </span><span class="s2">"/comments"</span><span class="p">)</span><span class="w">
      </span><span class="n">gh</span><span class="p">(</span><span class="n">original_comments_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">owner</span><span class="o">=</span><span class="n">upstream_details</span><span class="o">$</span><span class="n">owner</span><span class="o">$</span><span class="n">login</span><span class="p">,</span><span class="w"> 
        </span><span class="n">repo</span><span class="o">=</span><span class="n">repo</span><span class="o">$</span><span class="n">repo_name</span><span class="p">,</span><span class="w"> </span><span class="n">issue_number</span><span class="o">=</span><span class="n">pull_number</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="o">=</span><span class="n">rcppdeepstate_comment</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="test">Test</h2> <p>Before we execute the aforementioned script, we must first run the previous blog post’s code<sup id="fnref:4:2"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup> to fork the original repository and create the RcppDeepState reports. Remember that the new repositories will be created within the organization specified in the relative variable, as described in the <a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/08/23/rcppdeepstate-beta-test.html#future-work">Future work</a> paragraph of the previous blog post<sup id="fnref:4:3"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup>.</p> <p>Following that, we can ensure that all reports for the repositories being tested have been generated automatically using the following piece of code:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">repo_i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">pkg.repos</span><span class="p">)))){</span><span class="w">
  </span><span class="n">repo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pkg.repos</span><span class="p">[</span><span class="n">repo_i</span><span class="p">]</span><span class="w">
  </span><span class="n">fork_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">organization</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_name</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">"/"</span><span class="p">)</span><span class="w">

  </span><span class="n">fork_comments_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"GET /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_name</span><span class="p">,</span><span class="w"> 
                                   </span><span class="s2">"/issues/1/comments"</span><span class="p">)</span><span class="w">
  </span><span class="n">rcppdeepstate_pull</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">fork_comments_endpoint</span><span class="p">)</span><span class="w">
  
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">rcppdeepstate_pull</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">1</span><span class="p">){</span><span class="w">
    </span><span class="n">warn_msg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"The report for"</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">,</span><span class="w">
                      </span><span class="s2">"has not yet been generated."</span><span class="p">)</span><span class="w">
    </span><span class="n">message</span><span class="p">(</span><span class="n">warn_msg</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>I tested this script an hour after the automatic fork procedure had finished with a batch size of <code class="language-plaintext highlighter-rouge">10</code>, and it reported that the report for two repositories had not been generated.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The report comment has not been generated for ekstroem/MESS
The report comment has not been generated for MikeJaredS/hermiter
</code></pre></div></div> <p>By analyzing the logs, I discovered that the reports were not generated because of a missing library that is not installed and is not specified in the package’s prerequisites. According to the error message for the <code class="language-plaintext highlighter-rouge">hermiter</code> package, the missing library is <code class="language-plaintext highlighter-rouge">RcppParallel</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fatal error: <span class="s1">'RcppParallel.h'</span> file not found
<span class="c">#include &lt;RcppParallel.h&gt;</span>
         ^~~~~~~~~~~~~~~~
</code></pre></div></div> <h3 id="run-the-remote-pull-request-script">Run the remote pull request script</h3> <p>Running the script that submits a pull request remotely will result in the following output:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">source</span><span class="p">(</span><span class="s2">"remote_pull.R"</span><span class="p">)</span><span class="w">
</span><span class="n">No</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="n">has</span><span class="w"> </span><span class="n">been</span><span class="w"> </span><span class="n">reported</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="n">RcppDeepState</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">package</span><span class="w"> </span><span class="n">shabbychef</span><span class="o">/</span><span class="n">BWStest</span><span class="w">
</span><span class="n">The</span><span class="w"> </span><span class="n">report</span><span class="w"> </span><span class="n">comment</span><span class="w"> </span><span class="n">has</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">been</span><span class="w"> </span><span class="n">generated</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ekstroem</span><span class="o">/</span><span class="n">MESS</span><span class="w">
</span><span class="n">The</span><span class="w"> </span><span class="n">report</span><span class="w"> </span><span class="n">comment</span><span class="w"> </span><span class="n">has</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">been</span><span class="w"> </span><span class="n">generated</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MikeJaredS</span><span class="o">/</span><span class="n">hermiter</span><span class="w">
</span></code></pre></div></div> <p>Aside from the two previously mentioned repositories, the remote pull request for shabbychef/BWStest will not be submitted because RcppDeepState found no errors. Instead, the report will be submitted in a matter of seconds to the following repositories:</p> <ul> <li>ironholds/humaniformat <a href="https://github.com/Ironholds/humaniformat/pull/8">pull request #8</a></li> <li>jMotif/jmotif-R <a href="https://github.com/jMotif/jmotif-R/pull/35">pull request #35</a></li> <li>Ironholds/olctools <a href="https://github.com/Ironholds/olctools/pull/6">pull request #6</a></li> <li>WinVector/RcppDynProg <a href="https://github.com/WinVector/RcppDynProg/pull/1">pull request #1</a></li> <li>CollinErickson/CGGP <a href="https://github.com/CollinErickson/CGGP/pull/44">pull request #44</a></li> <li>paulhibbing/PAutilities <a href="https://github.com/paulhibbing/PAutilities/pull/8">pull request #8</a></li> <li>ms609/Quartet <a href="https://github.com/ms609/Quartet/pull/63">pull request #63</a></li> </ul> <h2 id="conclusion-and-future-work">Conclusion and Future work</h2> <p>With this article demonstrated how to add another step to the script that automatically forks and opens a pull request to the remote repositories. In this manner, I used a workaround to address the issues described in the article’s introduction.</p> <p>Future work will involve increasing the <code class="language-plaintext highlighter-rouge">batch_size</code> option to the maximum supported value in order to detect issues in all of the packages identified by Akhila.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://github.com/tdhock/binsegRcpp">binsegRcpp repository</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2"> <p><a href="https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks">Approving workflow runs from public forks</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3"> <p><a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">Automatic token authentication</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4"> <p><a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/08/23/rcppdeepstate-beta-test.html">Beta test RcppDeepState-action on GitHub hosted CRAN packages</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:4:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:4:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a> <a href="#fnref:4:3" class="reversefootnote" role="doc-backlink">&#8617;<sup>4</sup></a></p> </li> <li id="fn:5"> <p><a href="https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6"> <p><a href="https://tdhock.github.io/blog/2022/packages-on-github/">R packages on github</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="GitHub Action"/><summary type="html"><![CDATA[Solution for the problem that prevents the action from being run in remote pull requests.]]></summary></entry><entry><title type="html">Beta test RcppDeepState-action on GitHub hosted CRAN packages</title><link href="https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test/" rel="alternate" type="text/html" title="Beta test RcppDeepState-action on GitHub hosted CRAN packages"/><published>2022-08-23T00:00:00+00:00</published><updated>2022-08-23T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/rcppdeepstate-beta-test/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>My mentor has assigned me an interesting task to begin working on this week: test the current RcppDeepState GitHub Action on GitHub-hosted Rcpp-based packages. Akhila, the previous RcppDeepState maintainer, had already conducted a similar task, however this was done locally rather than in the package repository. Here’s a list of all the <a href="https://akhikolla.github.io./packages-folders/">Rcpp-based packages where RcppDeepState found issues</a><sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>.</p> <p>Now that RcppDeepState has been integrated with GitHub action, we can test more packages stored on GitHub; all we have to do is fork the original repositories, setup the action within them, and then make a pull request so that the action returns a comment with the analysis result. The main advantages of using RcppDeepState-action inside a repository are that it allows to:</p> <ul> <li>dynamically check for issues inside packages using continuous integration;</li> <li>reduce the risk of code level bugs that can compromise the entire package;</li> <li>improve the quality of the final package by making it easier to detect subtler bugs, receiving quick feedbacks and alerts if an error is detected;</li> </ul> <h2 id="the-problem">The problem</h2> <p>At the time of writing, CRAN lists 18493 packages, 312 of which have problems, according to Akhila’s report<sup id="fnref:1:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Given this list of packages, the question is whether it is feasible to determine if a package is hosted on GitHub. If so, can RcppDeepState be run on this repository?</p> <p>To begin with, the answer to the first question is yes, and my mentor Dr.Toby Dylan Hocking supplied me with a fantastic method that allows me to find the GitHub repository of a package by evaluating the package’s metadata available on CRAN. This method is based on locating the <code class="language-plaintext highlighter-rouge">https://github.com</code> prefix inside the metadata of the package. More information on this technique is available in the corresponding blog post<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>.</p> <p>The answer to the second question is affirmative; once we have a link to the repository, we can simply fork it, initialize RcppDeepState-action using the <code class="language-plaintext highlighter-rouge">RcppDeepState::ci_setup()</code> method, and submit a pull request; RcppDeepState’s report will be displayed as a comment within the pull request. The problem here is that, given the number of packages listed in the previous step, doing these steps one by one is impractical; consequently, in this post, I propose a method for automating this process.</p> <h2 id="solution">Solution</h2> <p>The solution makes use of four libraries:</p> <ul> <li><em>gh</em><sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>: a minimal client to access the REST API of GitHub;</li> <li><em>git2r</em><sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup>: an interface to the <code class="language-plaintext highlighter-rouge">libgit2</code> library, which provides access to Git repositories with some basic commands;</li> <li><em>data.table</em><sup id="fnref:5"><a href="#fn:5" class="footnote" rel="footnote" role="doc-noteref">5</a></sup>: a library to aggregate large data and run fast operations;</li> <li><em>RcppDeepState</em><sup id="fnref:6"><a href="#fn:6" class="footnote" rel="footnote" role="doc-noteref">6</a></sup>: a package to fuzz test your R library’s C++ code in order to find more subtle bugs like memory leaks or even more general memory errors.</li> </ul> <h3 id="steps">Steps</h3> <p>The first step is to import the required libraries and get the GitHub personal access token (PAT) stored in an environment variable called <code class="language-plaintext highlighter-rouge">GITHUB_PAT</code> in my case. This token will be used to authorize the push of local commits to a repository’s remote branch. To generate this token, you can follow the instructions provided by GitHub<sup id="fnref:7"><a href="#fn:7" class="footnote" rel="footnote" role="doc-noteref">7</a></sup>.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"gh"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"git2r"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"RcppDeepState"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"data.table"</span><span class="p">)</span><span class="w">

</span><span class="n">cred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cred_token</span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"GITHUB_PAT"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>Given a <code class="language-plaintext highlighter-rouge">pkg.repos</code> data table produced by following the steps specified in Dr.Toby Dylan Hocking’s blog post<sup id="fnref:2:1"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>, the implementation of the automatic fork/pull-request process mentioned above is described in the next steps.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">pkg.repos</span><span class="w">
          </span><span class="n">Package</span><span class="w">                                  </span><span class="n">repo.url</span><span class="w">
  </span><span class="m">1</span><span class="o">:</span><span class="w"> </span><span class="n">humaniformat</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">ironholds</span><span class="o">/</span><span class="n">humaniformat</span><span class="w">
  </span><span class="m">2</span><span class="o">:</span><span class="w">       </span><span class="n">jmotif</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jMotif</span><span class="o">/</span><span class="n">jmotif</span><span class="o">-</span><span class="n">R</span><span class="w">
  </span><span class="m">3</span><span class="o">:</span><span class="w">     </span><span class="n">olctools</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">Ironholds</span><span class="o">/</span><span class="n">olctools</span><span class="w">
  </span><span class="m">4</span><span class="o">:</span><span class="w">  </span><span class="n">RcppDynProg</span><span class="w">  </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">WinVector</span><span class="o">/</span><span class="n">RcppDynProg</span><span class="w">
  </span><span class="m">5</span><span class="o">:</span><span class="w">      </span><span class="n">BWStest</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">shabbychef</span><span class="o">/</span><span class="n">BWStest</span><span class="w">
 </span><span class="o">---</span><span class="w">                                                       
</span><span class="m">111</span><span class="o">:</span><span class="w">       </span><span class="n">tweenr</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">thomasp85</span><span class="o">/</span><span class="n">tweenr</span><span class="w">
</span><span class="m">112</span><span class="o">:</span><span class="w">         </span><span class="n">uwot</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jlmelville</span><span class="o">/</span><span class="n">uwot</span><span class="w">
</span><span class="m">113</span><span class="o">:</span><span class="w">       </span><span class="n">vapour</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">hypertidy</span><span class="o">/</span><span class="n">vapour</span><span class="w">
</span><span class="m">114</span><span class="o">:</span><span class="w">           </span><span class="n">wk</span><span class="w">         </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wk</span><span class="w">
</span><span class="m">115</span><span class="o">:</span><span class="w">      </span><span class="n">wkutils</span><span class="w">    </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wkutils</span><span class="w">
</span></code></pre></div></div> <p>We begin by removing the <code class="language-plaintext highlighter-rouge">http://github.com</code> prefix from each repository url, resulting in with a new column containing strings in the format <code class="language-plaintext highlighter-rouge">&lt;repository owner&gt;/&lt;repository name&gt;</code>.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pkg.repos</span><span class="p">[,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">sub</span><span class="p">(</span><span class="s2">"https://github.com/"</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">repo.url</span><span class="p">)</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">pkg.repos</span><span class="w">
          </span><span class="n">Package</span><span class="w">                                  </span><span class="n">repo.url</span><span class="w">         </span><span class="n">repo_full_name</span><span class="w">
  </span><span class="m">1</span><span class="o">:</span><span class="w"> </span><span class="n">humaniformat</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">ironholds</span><span class="o">/</span><span class="n">humaniformat</span><span class="w"> </span><span class="n">ironholds</span><span class="o">/</span><span class="n">humaniformat</span><span class="w">
  </span><span class="m">2</span><span class="o">:</span><span class="w">       </span><span class="n">jmotif</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jMotif</span><span class="o">/</span><span class="n">jmotif</span><span class="o">-</span><span class="n">R</span><span class="w">        </span><span class="n">jMotif</span><span class="o">/</span><span class="n">jmotif</span><span class="o">-</span><span class="n">R</span><span class="w">
  </span><span class="m">3</span><span class="o">:</span><span class="w">     </span><span class="n">olctools</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">Ironholds</span><span class="o">/</span><span class="n">olctools</span><span class="w">     </span><span class="n">Ironholds</span><span class="o">/</span><span class="n">olctools</span><span class="w">
  </span><span class="m">4</span><span class="o">:</span><span class="w">  </span><span class="n">RcppDynProg</span><span class="w">  </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">WinVector</span><span class="o">/</span><span class="n">RcppDynProg</span><span class="w">  </span><span class="n">WinVector</span><span class="o">/</span><span class="n">RcppDynProg</span><span class="w">
  </span><span class="m">5</span><span class="o">:</span><span class="w">      </span><span class="n">BWStest</span><span class="w">     </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">shabbychef</span><span class="o">/</span><span class="n">BWStest</span><span class="w">     </span><span class="n">shabbychef</span><span class="o">/</span><span class="n">BWStest</span><span class="w">
 </span><span class="o">---</span><span class="w">                                                                              
</span><span class="m">111</span><span class="o">:</span><span class="w">       </span><span class="n">tweenr</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">thomasp85</span><span class="o">/</span><span class="n">tweenr</span><span class="w">       </span><span class="n">thomasp85</span><span class="o">/</span><span class="n">tweenr</span><span class="w">
</span><span class="m">112</span><span class="o">:</span><span class="w">         </span><span class="n">uwot</span><span class="w">        </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">jlmelville</span><span class="o">/</span><span class="n">uwot</span><span class="w">        </span><span class="n">jlmelville</span><span class="o">/</span><span class="n">uwot</span><span class="w">
</span><span class="m">113</span><span class="o">:</span><span class="w">       </span><span class="n">vapour</span><span class="w">       </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">hypertidy</span><span class="o">/</span><span class="n">vapour</span><span class="w">       </span><span class="n">hypertidy</span><span class="o">/</span><span class="n">vapour</span><span class="w">
</span><span class="m">114</span><span class="o">:</span><span class="w">           </span><span class="n">wk</span><span class="w">         </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wk</span><span class="w">         </span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wk</span><span class="w">
</span><span class="m">115</span><span class="o">:</span><span class="w">      </span><span class="n">wkutils</span><span class="w">    </span><span class="n">https</span><span class="o">://</span><span class="n">github.com</span><span class="o">/</span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wkutils</span><span class="w">    </span><span class="n">paleolimbot</span><span class="o">/</span><span class="n">wkutils</span><span class="w">

</span></code></pre></div></div> <p>Then we can iterate over the repositories listed above, forking and cloning each one. Let us call each repository in the loop <code class="language-plaintext highlighter-rouge">repo_full_name</code>.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fork_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/forks"</span><span class="p">)</span><span class="w">
</span><span class="n">fork_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">fork_endpoint</span><span class="p">)</span><span class="w">

</span><span class="n">repo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">clone</span><span class="p">(</span><span class="n">fork_result</span><span class="o">$</span><span class="n">clone_url</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">)</span><span class="w">
</span><span class="n">config</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">http.followRedirects</span><span class="o">=</span><span class="s1">'true'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>After successfully cloning the repository, a new branch for the RcppDeepState analysis can be created. <code class="language-plaintext highlighter-rouge">RcppDeepState</code> is the name of this new branch.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_branch_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"RcppDeepState"</span><span class="w">
</span><span class="n">test_branch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">branch_create</span><span class="p">(</span><span class="n">last_commit</span><span class="p">(</span><span class="n">repo</span><span class="p">),</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">
</span><span class="n">checkout</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>The following step is to determine if the repository includes a legitimate package. This is accomplished by checking the existence of the <code class="language-plaintext highlighter-rouge">DESCRIPTION</code> file within the repository’s root: if this file exists, the repository includes a valid package that can be examined using RcppDeepState; otherwise, RcppDeepState cannot analyze the package.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">file.exists</span><span class="p">(</span><span class="n">file.path</span><span class="p">(</span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s2">"DESCRIPTION"</span><span class="p">))){</span><span class="w">
  </span><span class="n">stop</span><span class="p">(</span><span class="s2">"The repository doesn't contain a valid package"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>We can now use the existing <code class="language-plaintext highlighter-rouge">ci_setup</code> function to initialize the workflow file within the repository. This function accepts as input the location of the repository on the filesystem and a list of parameters corresponding to the action’s inputs. In this scenario, we’ve specified <code class="language-plaintext highlighter-rouge">fail_ci_if_error=TRUE</code> to cause the CI process to fail if an error is discovered, and <code class="language-plaintext highlighter-rouge">comment=TRUE</code> to print the report comment inside the pull request that will be produced in the following phase.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RcppDeepState</span><span class="o">::</span><span class="n">ci_setup</span><span class="p">(</span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">fail_ci_if_error</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">comment</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>The last step is to push the new changes to the forked repository and submit a pull request.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># commit and push the workflow file</span><span class="w">
</span><span class="n">add</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s2">".github"</span><span class="p">,</span><span class="w"> </span><span class="s2">"workflows"</span><span class="p">,</span><span class="w"> </span><span class="s2">"*"</span><span class="p">))</span><span class="w">
</span><span class="n">commit</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">message</span><span class="o">=</span><span class="s2">"RcppDeepState CI Setup"</span><span class="p">)</span><span class="w">
</span><span class="n">push</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="s2">"origin"</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"refs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"heads"</span><span class="p">,</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">"/"</span><span class="p">),</span><span class="w">
    </span><span class="n">credentials</span><span class="o">=</span><span class="n">cred</span><span class="p">)</span><span class="w">

</span><span class="c1"># open the pull request</span><span class="w">
</span><span class="n">pulls_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/pulls"</span><span class="p">)</span><span class="w">
</span><span class="n">pull_title</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"Analyze the package with RcppDeepState"</span><span class="w">
</span><span class="n">pull_body</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"### RcppDeepState Analysis\nThis pull request aims to find"</span><span class="p">,</span><span class="w"> 
                   </span><span class="s2">"bugs in this R package using RcppDeepState-action"</span><span class="p">)</span><span class="w">
</span><span class="n">gh</span><span class="p">(</span><span class="n">pulls_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="o">=</span><span class="n">pull_title</span><span class="p">,</span><span class="w"> </span><span class="n">owner</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">owner</span><span class="o">$</span><span class="n">login</span><span class="p">,</span><span class="w">
    </span><span class="n">repo</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="o">=</span><span class="n">pull_body</span><span class="p">,</span><span class="w"> </span><span class="n">base</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">default_branch</span><span class="p">,</span><span class="w">
    </span><span class="n">head</span><span class="o">=</span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="final-script">Final script</h3> <p>We get the following script by combining all of the previous steps with the solution supplied by my mentor. As you can see, a <code class="language-plaintext highlighter-rouge">batch_size</code> option has been introduced to allow you to choose the number of repositories to test. This option was added to prevent the creation of 115 repositories within your GitHub account.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"gh"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"git2r"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"RcppDeepState"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"data.table"</span><span class="p">)</span><span class="w">

</span><span class="n">cred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cred_token</span><span class="p">(</span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"GITHUB_PAT"</span><span class="p">)</span><span class="w">
</span><span class="n">batch_size</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="c1"># adjust the batch size</span><span class="w">

</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">file.exists</span><span class="p">(</span><span class="s2">"problems.html"</span><span class="p">)){</span><span class="w">
  </span><span class="n">download.file</span><span class="p">(</span><span class="w">
    </span><span class="s2">"https://akhikolla.github.io./packages-folders/"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"problems.html"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">prob.dt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nc</span><span class="o">::</span><span class="n">capture_all_str</span><span class="p">(</span><span class="w">
  </span><span class="s2">"problems.html"</span><span class="p">,</span><span class="w">
  </span><span class="s1">'&lt;li&gt;&lt;a href="'</span><span class="p">,</span><span class="w">
  </span><span class="n">Package</span><span class="o">=</span><span class="s2">".*?"</span><span class="p">,</span><span class="w">
  </span><span class="s1">'[.]html"&gt;'</span><span class="p">)</span><span class="w">

</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">file.exists</span><span class="p">(</span><span class="s2">"packages.rds"</span><span class="p">)){</span><span class="w">
  </span><span class="n">download.file</span><span class="p">(</span><span class="w">
    </span><span class="s2">"https://cloud.r-project.org/web/packages/packages.rds"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"packages.rds"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">meta.mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readRDS</span><span class="p">(</span><span class="s2">"packages.rds"</span><span class="p">)</span><span class="w">
</span><span class="n">meta.dt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.table</span><span class="p">(</span><span class="n">meta.mat</span><span class="p">)</span><span class="w">
</span><span class="n">meta.prob</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">meta.dt</span><span class="p">[</span><span class="n">prob.dt</span><span class="p">,</span><span class="w"> </span><span class="n">on</span><span class="o">=</span><span class="s2">"Package"</span><span class="p">]</span><span class="w">

</span><span class="n">pkg.repos</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">meta.prob</span><span class="p">[,</span><span class="w"> </span><span class="n">nc</span><span class="o">::</span><span class="n">capture_all_str</span><span class="p">(</span><span class="w">
  </span><span class="nf">c</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="n">URL</span><span class="p">),</span><span class="w"> </span><span class="c1"># to avoid attempting to download URL.</span><span class="w">
  </span><span class="n">repo.url</span><span class="o">=</span><span class="s2">"https://github.com/.*?/[^#/ ,]+"</span><span class="p">),</span><span class="w">
  </span><span class="n">by</span><span class="o">=</span><span class="n">Package</span><span class="p">]</span><span class="w">

</span><span class="n">pkg.repos</span><span class="p">[,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">sub</span><span class="p">(</span><span class="s2">"https://github.com/"</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">repo.url</span><span class="p">)</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">repo_full_name</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">pkg.repos</span><span class="o">$</span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> </span><span class="n">batch_size</span><span class="p">)){</span><span class="w">
  
  </span><span class="n">fork_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/forks"</span><span class="p">)</span><span class="w">
  </span><span class="n">fork_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">fork_endpoint</span><span class="p">)</span><span class="w">

  </span><span class="n">repo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">clone</span><span class="p">(</span><span class="n">fork_result</span><span class="o">$</span><span class="n">clone_url</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">)</span><span class="w">
  </span><span class="n">config</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">http.followRedirects</span><span class="o">=</span><span class="s1">'true'</span><span class="p">)</span><span class="w">

  </span><span class="n">test_branch_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"RcppDeepState"</span><span class="w">
  </span><span class="n">test_branch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">branch_create</span><span class="p">(</span><span class="n">last_commit</span><span class="p">(</span><span class="n">repo</span><span class="p">),</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">
  </span><span class="n">checkout</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">

  </span><span class="c1">### check if the repository's root contains a valid package</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">file.exists</span><span class="p">(</span><span class="n">file.path</span><span class="p">(</span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s2">"DESCRIPTION"</span><span class="p">))){</span><span class="w">
    </span><span class="n">stop</span><span class="p">(</span><span class="s2">"The repository doesn't contain a valid package"</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  
  </span><span class="n">RcppDeepState</span><span class="o">::</span><span class="n">ci_setup</span><span class="p">(</span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">fail_ci_if_error</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
                          </span><span class="n">comment</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

  </span><span class="c1"># commit and push the workflow file</span><span class="w">
  </span><span class="n">add</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s2">".github"</span><span class="p">,</span><span class="w"> </span><span class="s2">"workflows"</span><span class="p">,</span><span class="w"> </span><span class="s2">"*"</span><span class="p">))</span><span class="w">
  </span><span class="n">commit</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="n">message</span><span class="o">=</span><span class="s2">"RcppDeepState CI Setup"</span><span class="p">)</span><span class="w">
  </span><span class="n">push</span><span class="p">(</span><span class="n">repo</span><span class="p">,</span><span class="w"> </span><span class="s2">"origin"</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"refs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"heads"</span><span class="p">,</span><span class="w"> </span><span class="n">test_branch_name</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s2">"/"</span><span class="p">),</span><span class="w">
      </span><span class="n">credentials</span><span class="o">=</span><span class="n">cred</span><span class="p">)</span><span class="w">

  </span><span class="c1"># submit a pull request  </span><span class="w">
  </span><span class="n">pulls_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">fork_result</span><span class="o">$</span><span class="n">full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/pulls"</span><span class="p">)</span><span class="w">
  </span><span class="n">pull_title</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"Analyze the package with RcppDeepState"</span><span class="w">
  </span><span class="n">pull_body</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="s2">"### RcppDeepState Analysis\nThis pull request aims to"</span><span class="p">,</span><span class="w"> 
                    </span><span class="s2">"find bugs in this R package using RcppDeepState-action"</span><span class="p">)</span><span class="w">
  </span><span class="n">gh</span><span class="p">(</span><span class="n">pulls_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="o">=</span><span class="n">pull_title</span><span class="p">,</span><span class="w"> </span><span class="n">owner</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">owner</span><span class="o">$</span><span class="n">login</span><span class="p">,</span><span class="w">
      </span><span class="n">repo</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="o">=</span><span class="n">pull_body</span><span class="p">,</span><span class="w"> </span><span class="n">base</span><span class="o">=</span><span class="n">fork_result</span><span class="o">$</span><span class="n">default_branch</span><span class="p">,</span><span class="w">
      </span><span class="n">head</span><span class="o">=</span><span class="n">test_branch_name</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="test">Test</h2> <p>Before running the preceding script, I assumed that running it with a <code class="language-plaintext highlighter-rouge">batch_size</code> of 115(<code class="language-plaintext highlighter-rouge">nrow(pkg.repos$repo_full_name)</code>) would result in a massive generation of repositories within my GitHub account. As a preliminary solution, I set the <code class="language-plaintext highlighter-rouge">batch_size</code> argument to <code class="language-plaintext highlighter-rouge">2</code>, which means that just two packages will be examined. I explain a possible approach to avoid this massive production of repositories under my GitHub user profile in the <a href="#future-work">Future work</a> paragraph.</p> <p>The following repositories will be tested with a <code class="language-plaintext highlighter-rouge">batch_size</code> of 2:</p> <ul> <li><a href="https://github.com/ironholds/humaniformat">ironholds/humaniformat</a></li> <li><a href="https://github.com/jMotif/jmotif-R">jMotif/jmotif-R</a></li> </ul> <p>Following the execution of the above script, two repositories will be automatically generated by forking the originals. If you go inside the repositories’ pull requests, you’ll see that a new pull request titled <code class="language-plaintext highlighter-rouge">Analyze the package with RcppDeepState</code> has been automatically submitted. After a few minutes, when the CI checks are completed, you will see a comment inside the pull request with the analysis result.</p> <h3 id="results">Results</h3> <p>The findings of the analysis are publicly available on Github, and they highlight some issues within the evaluated packages. If we compare the results to those discovered by Akhila<sup id="fnref:1:2"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, we can see that there are some similarities.</p> <p>Here are the links to the results:</p> <ul> <li><a href="https://github.com/FabrizioSandri/humaniformat/pull/1">humaniformat results</a></li> <li><a href="https://github.com/FabrizioSandri/jmotif-R/pull/1">jmotif-R results</a></li> </ul> <h2 id="future-work">Future work</h2> <p>Creating 115 repositories, as previously said, will result in a huge generation of repositories within my GitHub account. This is not a problem solely because of the number of repositories, but if I need to remove all of them, I will undoubtedly have to write a script to do so; this can be a dangerous task if done in my current working environment (my user profile) because I may accidentally specify the incorrect condition and end up deleting the wrong repositories.</p> <p>One possible solution is to create a Github Organization and instruct the above script to fork the repositories to a specific organization rather than to my GitHub account. This can be accomplished by passing an extra argument to the GitHub REST API: the <code class="language-plaintext highlighter-rouge">organization</code> parameter; this parameter must be set to the organization’s name. The rest of the code will be left unchanged.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fork_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"POST /repos/"</span><span class="p">,</span><span class="w"> </span><span class="n">repo_full_name</span><span class="p">,</span><span class="w"> </span><span class="s2">"/forks"</span><span class="p">)</span><span class="w">
</span><span class="n">fork_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gh</span><span class="p">(</span><span class="n">fork_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">organization</span><span class="o">=</span><span class="s2">"&lt;org name&gt;"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://akhikolla.github.io./packages-folders/">Rcpp Packages with Issue Detected using RcppDeepState</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:1:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a></p> </li> <li id="fn:2"> <p><a href="https://tdhock.github.io/blog/2022/packages-on-github/">R packages on github</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:2:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> <li id="fn:3"> <p><a href="https://cran.r-project.org/web/packages/gh">CRAN package: gh</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:4"> <p><a href="https://cran.r-project.org/web/packages/git2r">CRAN package: packages</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:5"> <p><a href="https://cran.r-project.org/web/packages/data.table">CRAN package: data.table</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:6"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState">RcppDeeepState</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:7"> <p><a href="https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="GitHub Action"/><summary type="html"><![CDATA[RcppDeepState-action beta test on other packages]]></summary></entry><entry><title type="html">Provide a custom test harness to RcppDeepState GitHub Action</title><link href="https://fabriziosandri.github.io/blog/2022/action-custom-harness/" rel="alternate" type="text/html" title="Provide a custom test harness to RcppDeepState GitHub Action"/><published>2022-08-11T00:00:00+00:00</published><updated>2022-08-11T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/action-custom-harness</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/action-custom-harness/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Sometimes it can happen that a function in your package cannot be analyzed because of some datatypes falling outside of the set of supported one. In this scenario, RcppDeepState cannot create the test harness automatically, thus the user must supply it manually.</p> <p>This blog post is meant to be a guide for the users who wants to provide a custom test harness to the RcppDeepState GitHub Action.</p> <h2 id="custom-test-harness">Custom test harness</h2> <p>Creating a custom test harness is a difficult operation that must be completed appropriately by adhering to the general test harness structure outlined in the dedicated blog post<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. If the test harness is not properly designed, RcppDeepState will not be able to locate and perform the tests.</p> <p>Before continuing to read this post, you should first read about the test harness structure that RcppDeepState accepts. The following snippet of code contains the harness file’s structure that the user must follow to correctly operate with RcppDeepState. All of this has already been mentioned in the the dedicated blog post<sup id="fnref:1:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RInside.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RcppDeepState.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;qs.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;DeepState.hpp&gt;</span><span class="cp">
</span>
<span class="n">RInside</span> <span class="n">Rinstance</span><span class="p">;</span>

<span class="cm">/** FUNCTION SIGNATURE
* signature of the function being analyzed must be added here 
*/</span>

<span class="cm">/** INPUTS
* here you can define all the inputs for your function, and initialize them
* with a random value generator. Define your inputs inside the `#define INPUTS` 
* macro.
* 
* Example: initialize a random integer parameter 'arg1':
* #define INPUTS \
*   int arg1 = DeepState_Int();
*/</span>

<span class="n">TEST</span><span class="p">(</span><span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">generator</span><span class="p">){</span>
  <span class="n">INPUTS</span>
<span class="p">}</span>

<span class="n">TEST</span><span class="p">(</span><span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">runner</span><span class="p">){</span>
  <span class="n">INPUTS</span>

  <span class="cm">/** INPUTS DUMP
  * for each input defined above you have to save it in the 'inputs' directory
  * created before using the function qs::c_qsave(param, "./inputs/arg_name.qs", 
  * "high", "zstd", 1, 15, true, 1). Remember to replace 'arg_name' inside 
  * "./inputs/arg_name.qs" with the name of the associated input argument.
  * 
  * Example: save the 'arg1' input defined before:
  * qs::c_qsave(arg1, "./inputs/arg1.qs", "high", "zstd", 1, 15, true, 1)
  */</span>

  <span class="k">try</span><span class="p">{</span>
    <span class="cm">/** FUNCTION INVOCATION
    * here you have to add the invocation of the function being analyzed with 
    * all its parameters defined in the section PARAMETERS.
    */</span> 
  <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Exception Handled"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="provide-the-test-harness-to-the-action">Provide the test harness to the Action</h2> <p>Once you have created a custom test harness for your function you can provide it to the RcppDeepState GitHub Action by simply creating a subdirectory inside your package’s <code class="language-plaintext highlighter-rouge">/inst/testfiles</code>, named as the function that is being analyzed. This folder will contain the harness file that should be named as the function being analyzed plus the <code class="language-plaintext highlighter-rouge">_DeepState_TestHarness.cpp</code> suffix. RcppDeepState will look for existing test harness files and use them instead of generating new ones before performing the analysis step.</p> <p>While doing so, keep in mind the naming standards allowed by RcppDeepState; otherwise, unexpected problems may occur.</p> <h4 id="example">Example</h4> <p>Assume that a package stored in the root of a repository has a function named <code class="language-plaintext highlighter-rouge">unsupported_datatype</code> that needs to be analyzed with RcppDeepState. Suppose this function has a parameter whose type falls out of the supported datatypes: the <code class="language-plaintext highlighter-rouge">Rcpp::LogicalVector</code> datatype.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;Rcpp.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// [[Rcpp::export]]</span>
<span class="kt">int</span> <span class="nf">unsupported_datatype</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">LogicalVector</span> <span class="n">param</span><span class="p">){</span>
  <span class="k">return</span> <span class="n">param</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
<span class="p">}</span> 
</code></pre></div></div> <p>Because the test harness cannot be built automatically, this function cannot be analyzed using RcppDeepState. As mentioned above, one solution to this problem is to manually generate the test harness.</p> <p>To accomplish this, the user can create a custom test harness and save it in the <code class="language-plaintext highlighter-rouge">/inst/testfiles/unsupported_datatype/unsupported_datatype_DeepState_TestHarness.cpp</code> location (relative to the repository’s root).</p> <h2 id="conclusion">Conclusion</h2> <p>We saw in this post how to pass a manually created test harness to RcppDeepState-action. This RcppDeepState feature allows developers to analyze functions with unsupported datatypes as arguments.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://fabriziosandri.github.io/gsoc-2022-blog/rcppdeepstate/2022/07/29/custom-test-harness.html">Write a custom test harness for functions with unsupported datatypes</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="RcppDeepState"/><category term="GitHub Action"/><summary type="html"><![CDATA[Guide to provide RcppDeepState-action a custom test harness for a function that cannot be analyzed.]]></summary></entry><entry><title type="html">Write a custom test harness for functions with unsupported datatypes</title><link href="https://fabriziosandri.github.io/blog/2022/custom-test-harness/" rel="alternate" type="text/html" title="Write a custom test harness for functions with unsupported datatypes"/><published>2022-07-29T00:00:00+00:00</published><updated>2022-07-29T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/custom-test-harness</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/custom-test-harness/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The list of supported datatypes maintained by RcppDeepState is used to automatically create test harnesses for functions whose supported datatypes fall within this list. This list was created using a frequency table of the top 100 Rcpp types found in CRAN packages<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. The complete list of supported datatypes is provided below:</p> <ul> <li><code class="language-plaintext highlighter-rouge">int</code></li> <li><code class="language-plaintext highlighter-rouge">double</code></li> <li><code class="language-plaintext highlighter-rouge">string</code></li> <li><code class="language-plaintext highlighter-rouge">Rcpp::NumericVector</code></li> <li><code class="language-plaintext highlighter-rouge">Rcpp::IntegerVector</code></li> <li><code class="language-plaintext highlighter-rouge">Rcpp::NumericMatrix</code></li> <li><code class="language-plaintext highlighter-rouge">Rcpp::CharacterVector</code></li> <li><code class="language-plaintext highlighter-rouge">arma::mat</code></li> </ul> <p>It is possible for a function you want to analyze to have a parameter that is not on this list, in which case RcppDeepState will notify you that the function cannot be examined due to an unsupported parameter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We can't test the function - unsupported_datatype - due to the following datatypes falling out of the allowed ones: LogicalVector

Failed to create testharness for 1 functions in the package - unsupported_datatype
</code></pre></div></div> <p>This just indicates that the automatic procedure to create a test harness cannot be used, not that your function cannot be analyzed at all. The test harness must therefore be manually created together with its directory structure, and it must then be examined. I’ll explain this procedure in this blog article.</p> <h2 id="the-procedure">The procedure</h2> <p>RcppDeepState involves two steps:</p> <ul> <li><em>generator</em>: automatically generates the harness and all the inputs</li> <li><em>runner</em>: analyze the package running each function given the inputs of the generator step</li> </ul> <p>The generator step cannot be used for a function whose inputs are not supported, so we must manually run the steps to construct the directory structure for this function. This can be done using the existing RcppDeepState functions.</p> <p>Given the path of the package being analyzed <code class="language-plaintext highlighter-rouge">package_location</code> and the name of the function which datatypes fall out of the supported ones <code class="language-plaintext highlighter-rouge">function_name</code>, the <code class="language-plaintext highlighter-rouge">deepstate_create_makefile</code> function can be used to generate the directory structure for the custom test harness:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deepstate_create_makefile</span><span class="p">(</span><span class="n">package_location</span><span class="p">,</span><span class="w"> </span><span class="n">function_name</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>If everything goes smoothly, you can begin creating the custom test harness for your function. The test harness file must be named <code class="language-plaintext highlighter-rouge">function_name_DeepState_TestHarness.cpp</code>, where <code class="language-plaintext highlighter-rouge">function_name</code>is the name of the function you want to analyze. You can use the following template as a reference.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RInside.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RcppDeepState.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;qs.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;DeepState.hpp&gt;</span><span class="cp">
</span>
<span class="n">RInside</span> <span class="n">Rinstance</span><span class="p">;</span>

<span class="cm">/** FUNCTION SIGNATURE
* signature of the function being analyzed must be added here 
*/</span>

<span class="cm">/** INPUTS
* here you can define all the inputs for your function, and initialize them
* with a random value generator. Define your inputs inside the `#define INPUTS` 
* macro.
* 
* Example: initialize a random integer parameter 'arg1':
* #define INPUTS \
*   int arg1 = DeepState_Int();
*/</span>

<span class="n">TEST</span><span class="p">(</span><span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">generator</span><span class="p">){</span>
  <span class="n">INPUTS</span>
<span class="p">}</span>

<span class="n">TEST</span><span class="p">(</span><span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">runner</span><span class="p">){</span>
  <span class="n">INPUTS</span>

  <span class="cm">/** INPUTS DUMP
  * for each input defined above you have to save it in the 'inputs' directory
  * created before using the function qs::c_qsave(param, "./inputs/arg_name.qs", 
  * "high", "zstd", 1, 15, true, 1). Remember to replace 'arg_name' inside 
  * "./inputs/arg_name.qs" with the name of the associated input argument.
  * 
  * Example: save the 'arg1' input defined before:
  * qs::c_qsave(arg1, "./inputs/arg1.qs", "high", "zstd", 1, 15, true, 1)
  */</span>

  <span class="k">try</span><span class="p">{</span>
    <span class="cm">/** FUNCTION INVOCATION
    * here you have to add the invocation of the function being analyzed with 
    * all its parameters defined in the section PARAMETERS.
    */</span> 
  <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Exception Handled"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Remember to replace <code class="language-plaintext highlighter-rouge">&lt;package_name&gt;</code> in the <code class="language-plaintext highlighter-rouge">TEST(&lt;package_name&gt;, generator)</code> definition with your package name (without angular brackets).</p> <p>Once the harness has been created you can generate the inputs and analyze the function containing unsupported datatypes as arguments.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deepstate_fuzz_fun</span><span class="p">(</span><span class="n">package_location</span><span class="p">,</span><span class="w"> </span><span class="n">function_name</span><span class="p">)</span><span class="w">
</span><span class="n">result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">deepstate_harness_analyze_pkg</span><span class="p">(</span><span class="n">package_location</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h2 id="example">Example</h2> <p>I want to provide an example of the <code class="language-plaintext highlighter-rouge">unsupported_datatype</code> function that can be found in the testSAN package<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. This function uses a <code class="language-plaintext highlighter-rouge">LogicalVector</code> as its single parameter, thus RcppDeepState will skip this function from the analysis.</p> <p>To solve this I followed all the steps mentioned above. First of all I ran the <code class="language-plaintext highlighter-rouge">deepstate_create_makefile</code> function, remembering that I had to define the missing variables(<code class="language-plaintext highlighter-rouge">package_location</code> and <code class="language-plaintext highlighter-rouge">function_name</code>):</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">package_location</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"/home/fabri/test/testHarness/RcppDeepState/inst/testpkgs/testSAN"</span><span class="w">
</span><span class="n">function_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"unsupported_datatype"</span><span class="w">

</span><span class="n">deepstate_create_makefile</span><span class="p">(</span><span class="n">package_location</span><span class="p">,</span><span class="w"> </span><span class="n">function_name</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>At the end of this, a directory containing the following content has been created:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unsupported_datatype
├── inputs
├── Makefile
└── unsupported_datatype_output
</code></pre></div></div> <p>Then I moved on and created the test harness file inside the <code class="language-plaintext highlighter-rouge">unsupported_datatype</code> directory and I renamed this file as <code class="language-plaintext highlighter-rouge">unsupported_datatype_DeepState_TestHarness.cpp</code>. I followed the template provided above. This is the result:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RInside.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;RcppDeepState.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;qs.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;DeepState.hpp&gt;</span><span class="cp">
</span>
<span class="n">RInside</span> <span class="n">Rinstance</span><span class="p">;</span>

<span class="cm">/** FUNCTION SIGNATURE */</span>
<span class="kt">int</span> <span class="nf">unsupported_datatype</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">LogicalVector</span> <span class="n">param</span><span class="p">);</span>

<span class="cm">/** INPUTS */</span> 
<span class="cp">#define INPUTS \
  LogicalVector param = RcppDeepState_LogicalVector();
</span>
<span class="n">Rcpp</span><span class="o">::</span><span class="n">LogicalVector</span> <span class="nf">RcppDeepState_LogicalVector</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="n">rand_size</span> <span class="o">=</span> <span class="n">DeepState_IntInRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
  <span class="n">Rcpp</span><span class="o">::</span><span class="n">LogicalVector</span> <span class="n">rand_vec</span><span class="p">(</span><span class="n">rand_size</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rand_size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>      
    <span class="n">rand_vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">DeepState_IntInRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">rand_vec</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">TEST</span><span class="p">(</span><span class="n">testSAN</span><span class="p">,</span> <span class="n">generator</span><span class="p">){</span>
  <span class="n">INPUTS</span>  
<span class="p">}</span>

<span class="n">TEST</span><span class="p">(</span><span class="n">testSAN</span><span class="p">,</span> <span class="n">runner</span><span class="p">){</span>
  <span class="n">INPUTS</span>

  <span class="cm">/** INPUTS DUMP */</span>
  <span class="n">qs</span><span class="o">::</span><span class="n">c_qsave</span><span class="p">(</span><span class="n">param</span><span class="p">,</span> <span class="s">"./inputs/param.qs"</span><span class="p">,</span> <span class="s">"high"</span><span class="p">,</span> <span class="s">"zstd"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

  <span class="k">try</span><span class="p">{</span>
    <span class="cm">/** FUNCTION INVOCATION */</span>
    <span class="n">unsupported_datatype</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
  <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Exception Handled"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>You can notice that I have created an auxiliary function <code class="language-plaintext highlighter-rouge">RcppDeepState_LogicalVector</code> used to generate a random <code class="language-plaintext highlighter-rouge">LogicalVector</code> of size ranging from 1 to 20 elements.</p> <p>Finally I run the last two steps:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deepstate_fuzz_fun</span><span class="p">(</span><span class="n">package_location</span><span class="p">,</span><span class="w"> </span><span class="n">function_name</span><span class="p">)</span><span class="w">
</span><span class="n">result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">deepstate_harness_analyze_pkg</span><span class="p">(</span><span class="n">package_location</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>If you print the <code class="language-plaintext highlighter-rouge">result</code> table you will find that <code class="language-plaintext highlighter-rouge">unsupported_datatype</code> has finally been tested with RcppDeepState.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState/issues/10#issuecomment-1179190239">Top 100 Rcpp types found in CRAN packages</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState/blob/master/inst/testpkgs/testSAN/src/unsupported_datatype.cpp">unsupported_datatype function</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="RcppDeepState"/><summary type="html"><![CDATA[Guide to write a custom test harness for a function that cannot be analyzed because of some datatypes falling outside of the supported ones.]]></summary></entry><entry><title type="html">GitHub action’s execution time</title><link href="https://fabriziosandri.github.io/blog/2022/action-time-improvement/" rel="alternate" type="text/html" title="GitHub action’s execution time"/><published>2022-07-25T00:00:00+00:00</published><updated>2022-07-25T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/action-time-improvement</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/action-time-improvement/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>In the previous week I successfully integrated the original Docker action with a composite one. The main result of this update is a more flexible action that makes possible to publish the analysis results on Github; this is possible by publishing an artifact file containing the inputs and adding comments to pull requests. In the past working week (Week 7) I discussed with my mentor Randy about this change and he suggested me to prebuild the entire action and upload it to Docker Hub, which is a service provided by Docker for sharing container images<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. In this blog post I describe the process that will be followed this week, in order to prebuild the Docker image and publish it to Docker Hub.</p> <h2 id="considerations">Considerations</h2> <p>The actual execution time of the Action is about 15-30 minutes. A huge amount of this time is spent installing all the missing dependencies, which includes the R package, devtools, and so on. Installing each of these every time the action is triggered is useless. A better approach instead would be to prebuild the docker container and save the image so that it can be reused each time the action will be run. This can be accomplished by publishing the image on Docker Hub. What I expect from this improvement is a reduction of the amount of time spent installing the dependencies.</p> <p>One last thing to think about is moving the devtools installation command from the <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> file to the Dockerfile so that it will be installed when the container is built.</p> <h2 id="switch-to-a-prebuilt-docker-image">Switch to a prebuilt docker image</h2> <p>The main idea is to replace the actual Action’s Dockerfile with a simple composite step that runs the image from Docker Hub.</p> <p>In the actual implementation, every time the Action is triggered, a container is built in accordance with the Dockerfile, downloading each dependency one at a time, as you can see in the Dockerfile of the following sample.</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ubuntu:latest</span>

<span class="c"># setup zoneinfo</span>
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-snf</span> /usr/share/zoneinfo/<span class="nv">$INPUT_ZONEINFO</span> /etc/localtime <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="nv">$INPUT_ZONEINFO</span> <span class="o">&gt;</span> /etc/timezone

<span class="c">### Dependencies installation</span>
<span class="k">RUN </span>apt update
<span class="k">RUN </span>apt <span class="nb">install</span> <span class="nt">-y</span> build-essential gcc-multilib g++-multilib cmake <span class="se">\
</span>                   python3-setuptools python3-dev libffi-dev clang valgrind <span class="se">\
</span>                   libcurl4-gnutls-dev libxml2-dev libssl-dev wget <span class="se">\
</span>                   libfontconfig1-dev libharfbuzz-dev libfribidi-dev <span class="se">\
</span>                   libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev r-base

<span class="c"># Copy the files to the root filesystem of the container</span>
<span class="k">COPY</span><span class="s"> src/entrypoint.sh /entrypoint.sh</span>
<span class="k">COPY</span><span class="s"> src/analyze_package.R /analyze_package.R</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /entrypoint.sh

<span class="c"># Executes `entrypoint.sh` when the Docker container starts up</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["/entrypoint.sh"]</span>
</code></pre></div></div> <p>The new composite step will make use of the prebuilt image made available on Docker Hub. The dependencies are all installed in this image, so setting them up won’t take any time; the only overhead will be caused by downloading the prebuilt action. This is the <code class="language-plaintext highlighter-rouge">action.yml</code> before the change.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s2">"</span><span class="s">composite"</span>
  <span class="na">steps</span><span class="pi">:</span>

    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span> 
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">repository</span><span class="pi">:</span> <span class="s">FabrizioSandri/RcppDeepState-action</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">RcppDeepState-action</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Analyze the package with RcppDeepState</span> 
      <span class="na">uses</span><span class="pi">:</span> <span class="s">./RcppDeepState-action/docker</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">fail_ci_if_error</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">location</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">seed</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">time_limit</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">max_inputs</span><span class="pi">:</span> <span class="s">$</span>
<span class="nn">...</span>
</code></pre></div></div> <p>After the change, it will look like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s2">"</span><span class="s">composite"</span>
  <span class="na">steps</span><span class="pi">:</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Analyze the package with RcppDeepState</span> 
      <span class="na">uses</span><span class="pi">:</span> <span class="s">docker://fabriziosandri/rcppdeepstate:latest</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">fail_ci_if_error</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">location</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">seed</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">time_limit</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">max_inputs</span><span class="pi">:</span> <span class="s">$</span>
<span class="nn">...</span>
</code></pre></div></div> <p>As you can see the <code class="language-plaintext highlighter-rouge">checkout</code> step has been removed, in fact there’s no need to download the Dockerfile and the related files(<code class="language-plaintext highlighter-rouge">/docker</code> folder). This solves the problem of specifying the branch name in the checkout step mentioned by Randy in the pull request #4<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. However this introduces a new problem: I have to decide which event should trigger the update of the image on Docker Hub. A possible solution for this problem is to update the image every time a new commit on the master branch occurs. The problem with this solution is that, if I make a pull request and want to test some new updates made on the docker image, I have to push the result on the master branch to trigger the update on Docker Hub.</p> <h2 id="continuous-deploy-of-the-docker-image">Continuous deploy of the Docker image</h2> <p>Each change to the Docker architecture must be reflected to the image published on Docker Hub. In order to make this process automatic and avoid to manually push the docker image to Docker Hub, as suggested by Randy, there is an existing GitHub Action that automatically builds and publishes Docker images to Docker Hub<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>. This action can be integrated in the RcppDeepState-action repository inside a workflow’s job that is triggered every time a commit on the master branch occurs.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">docker</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Docker Buildx</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/setup-buildx-action@v2</span>
      
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Login to DockerHub</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/login-action@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">username</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">password</span><span class="pi">:</span> <span class="s">$</span>
    
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build and push</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">docker/build-push-action@v3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">context</span><span class="pi">:</span> <span class="s">./docker</span>
          <span class="na">push</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">tags</span><span class="pi">:</span> <span class="s">fabriziosandri/rcppdeepstate:latest</span>
</code></pre></div></div> <p>A token must be generated in order to publish the image to Docker Hub and authenticate the user before pushing the image on it. This token can be simply generated by going in Profile Settings &gt; Security &gt; Access Tokens &gt; New Access Token. A pop up will appear, asking for the permissions that will be assigned to this token; the value “Read, Write, Delete” is sufficient.</p> <p>In order to prevent information theft, the token and the username should be kept as a repository secret. In the example above, the variables for the username and token are referred to as <code class="language-plaintext highlighter-rouge">DOCKERHUB_USERNAME</code> and <code class="language-plaintext highlighter-rouge">DOCKERHUB_TOKEN</code> respectively. These parameters have been set in the Security &gt; Secrets &gt; Actions menu on the Settings tab of the repository. Once they are defined, they can be used in the following way<code class="language-plaintext highlighter-rouge"> $</code>.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://hub.docker.com/">Docker Hub</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:3"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/4#issuecomment-1183670955">Composite action #4</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2"> <p><a href="https://github.com/marketplace/actions/build-and-push-docker-images">GitHub Action - Build and push Docker images</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="GitHub Action"/><summary type="html"><![CDATA[Description of the steps that I will follow this week to improve the GitHub action's execution time]]></summary></entry><entry><title type="html">Moving to a composite GitHub Action</title><link href="https://fabriziosandri.github.io/blog/2022/move-to-composite/" rel="alternate" type="text/html" title="Moving to a composite GitHub Action"/><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><id>https://fabriziosandri.github.io/blog/2022/move-to-composite</id><content type="html" xml:base="https://fabriziosandri.github.io/blog/2022/move-to-composite/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>In the fifth week of work I’ve created a first working prototype of the GitHub Action for RcppDeepState, based on the considerations that I published in the dedicated blog post<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Within this post, I discussed three different architectures that might be used when creating a GitHub Action. Among the three possibilities, I selected to develop a GitHub action based on Docker.</p> <p>However, in the pull request for the Action’s initial prototype, I indicated the potential of switching from a Docker Action to a Composite Action<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>:</p> <blockquote> <p>“In the future, I’ll also think about if I can express this Action as a composite action.”</p> </blockquote> <h2 id="docker-system-motivation">Docker system motivation</h2> <p>The key reason for using a Docker-based system is that it enables for the creation of a fully customized environment in which RcppDeepState will execute. This allows me to install only the essential tools and configure the environment such that RcppDeepState fits in. In particular the idea came by the fact that RcppDeepState requires that optimization options must be disabled in the system in order to work with it’s maximum performance. Furthermore, because RcppDeepState can only be executed on Linux-based computers, limiting it to a Docker system based on a Linux container is a reasonable option.</p> <h2 id="problem">Problem</h2> <p>However, not everything works well with the Docker system since it lacks the final user interaction. This is a crucial consideration because it is what the final user will see. If the user is unable to detect or rapidly identify the errors in a package, the entire Action will be useless. Using the docker architecture, the action can only print the results in the log in text format, without allowing the results to be uploaded as an artifact file and shared with other steps/jobs in the workflow.</p> <h2 id="solution">Solution</h2> <p>Starting with this I searched for a solution to the problem and discovered that <code class="language-plaintext highlighter-rouge">actions/upload-artifact</code> allows to share the analysis findings with other jobs by publishing an artifact file. The <code class="language-plaintext highlighter-rouge">actions/upload-artifact</code> would be handy for RcppDeepState since it may be configured to upload the analyzed package’s ‘inst/testfiles’ folder, which contains the inputs as well as the Valgrind outputs of the RcppDeepState execution.</p> <p>The issue is that publishing an artifact file via the Docker system is a challenging operation. One possibility is to combine the present Docker system with a Composite Action to gain the benefits of both systems. Thus in this week of work(seventh week) I will integrate the existing docker system with a composite action. The primary action will be the composite one, and the docker action will be triggered by a composite step.</p> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1"> <p><a href="https://fabriziosandri.github.io/gsoc-2022-blog/github%20action/2022/06/28/github-actions.html">RcppDeepState’s GitHub Action considerations</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2"> <p><a href="https://github.com/FabrizioSandri/RcppDeepState-action/pull/1">First prototype</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="Google Summer of Code"/><category term="GitHub Action"/><summary type="html"><![CDATA[Considerations review]]></summary></entry></feed>